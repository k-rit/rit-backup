#!/bin/bash
#   -----------------------------------------------------------------------------------------
#   Copyright (c) 2018 rilling.IT
#   -----------------------------------------------------------------------------------------
#   Released under the GNU General Public License 
#   -----------------------------------------------------------------------------------------

if [ "$1" == "f" ] || [ "$1" == "full" ] || [ "$1" == "Full" ]
then
	ART="Full"
else
	ART="System"
fi

#Config
BASEDIR=$(readlink -f "$0")
BASEDIR=$(dirname "$BASEDIR")

source ${BASEDIR}/backup-loadconfig

System[SOURCE]=${System[SOURCE]//[\"]}


DATE_H=$(date +%d.%m.%Y-%H:%M:%S)
echo "[${DATE_H}] - Starting $0"


MYSQL_BEN=${System[MYSQL_BEN]}
MYSQL_PW=`echo ${System[MYSQL_PW]} | base64 --decode`
BACKUP_DIR=${System[BACKUP_DIR]}
SQL_DIR=${System[SQL_DIR]}
SOURCE=${System[SOURCE]}
SOURCE="$SQL_DIR $SOURCE"
FULL_BACKUP_DAY=${System[FULL_BACKUP_DAY]}
EXCLUDE_DIRS=${System[EXCLUDE_DIR]}

SINUSBOT_BACKUPDIR=${Sinusbot[DIR_BACKUP]}
LOCAL_BACKUPS_NUM=${System[LOCAL_BACKUPS_NUM]}

#Datum generieren
DATE=$(date +%Y-%m-%d--%H%M%S)
DATE_H=$(date +%d.%m.%Y-%H:%M:%S)

#Hostname
NAME=$(hostname)

if [ ! -d "$BACKUP_DIR" ]
then
	mkdir ${BACKUP_DIR}
fi

if [ ! -d "$SQL_DIR/backup" ]
then
	mkdir ${SQL_DIR}/backup
fi

#Alte MYSQL Sicherung Löschen
rm $SQL_DIR/backup/*

echo "[${DATE_H}] - The old MYSQL backup has been removed!"

#SQL Sichern
mysqldump -E -u ${MYSQL_BEN} -p${MYSQL_PW} --all-databases > ${SQL_DIR}/backup/backup-all-databases-$DATE.sql
 
MYSQL=/usr/bin/mysql
MYSQLDUMP=/usr/bin/mysqldump

export MYSQL_PWD=${MYSQL_PW}

databases=`$MYSQL --user=${MYSQL_BEN} -e "SHOW DATABASES;" | grep -Ev "(Database|information_schema|performance_schema)"`
 
for db in $databases; do
	$MYSQLDUMP --force --opt --user=${MYSQL_BEN} --databases $db | gzip > "${SQL_DIR}/backup/$db-$DATE.sql.gz"
done

# 
DATE_H=$(date +%d.%m.%Y-%H:%M:%S)
echo "[${DATE_H}] - MYSQL Backup was created"
sleep 2s

#${BASEDIR}/backup-prog apache2 stop
#${BASEDIR}/backup-prog mysql stop
#systemctl stop apache2
#systemctl stop mysql

if [ -d $EXCLUDE_DIRS ]; then EXCLUDE_DIR="--exclude=$EXCLUDE_DIRS"; else EXCLUDE_DIR=""; fi
if [ -d $BACKUP_DIR ]; then EXCLUDE_DIR2="--exclude=$BACKUP_DIR"; else EXCLUDE_DIR2=""; fi
if [ -d $SINUSBOT_BACKUPDIR ]; then EXCLUDE_DIR3="--exclude=$SINUSBOT_BACKUPDIR"; else EXCLUDE_DIR3=""; fi

DATE_H=$(date +%d.%m.%Y-%H:%M:%S)

# Temp start
TODAY=`date +%u`
BASENAME="$(basename $0)"
if [ $BASEDIR == "." ]; then BASEDIR2=""; else BASEDIR2="${BASEDIR}/"; fi
TIMESTAMP="${BASEDIR2}${BASENAME}-timestamp.dat"
# Temp end

echo "[${DATE_H}] - Backup-${ART} started..." 
if [ ${ART} == "Full" ]
then
	tar -cjpPf $BACKUP_DIR/backup-full-${NAME}-$DATE.tar.bz2 --one-file-system $EXCLUDE_DIR $EXCLUDE_DIR2 $EXCLUDE_DIR3 /
else
	if [ ! -f ${TIMESTAMP} ]; then TODAY=${FULL_BACKUP_DAY}; fi
	if [ "${TODAY}" == "${FULL_BACKUP_DAY}" ]
	then
		rm ${TIMESTAMP}
		tar -cjpf $BACKUP_DIR/backup-system-${NAME}-$DATE-ful.tar.bz2 -g ${TIMESTAMP} $EXCLUDE_DIR $EXCLUDE_DIR2 $EXCLUDE_DIR3 $SOURCE
	else
		tar -cjpf $BACKUP_DIR/backup-system-${NAME}-$DATE-inc.tar.bz2 -g ${TIMESTAMP} $EXCLUDE_DIR $EXCLUDE_DIR2 $EXCLUDE_DIR3 $SOURCE
	fi
fi

DATE_H=$(date +%d.%m.%Y-%H:%M:%S)

#${BASEDIR}/backup-prog mysql start
#${BASEDIR}/backup-prog apache2 start
#systemctl start mysql
#systemctl start apache2

echo "[${DATE_H}] - Backup-${ART} successfully completed :)"

DATE_H=$(date +%d.%m.%Y-%H:%M:%S)
echo "[${DATE_H}] - remove old backups"

${BASEDIR}/backup-remove $BACKUP_DIR $LOCAL_BACKUPS_NUM

